import { chromium, FullConfig } from '@playwright/test';
import fs from 'fs';
import path from 'path';

/**
 * Global Teardown for Level 3 Checkout Tests
 * 
 * Cleans up after Level 3 testing:
 * - Generates test summary report
 * - Cleans up test data
 * - Archives screenshots and videos
 * - Reports on Level 3 specific metrics
 */

async function globalTeardown(config: FullConfig) {
  console.log('🧹 Starting Level 3 test environment cleanup...');
  
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    // 1. Generate test summary
    console.log('📊 Generating Level 3 test summary...');
    
    const testResults = {
      timestamp: new Date().toISOString(),
      testSuite: 'Level 3 Checkout',
      environment: {
        nodeVersion: process.version,
        platform: process.platform,
        baseURL: config.projects[0]?.use?.baseURL || 'http://localhost:3000'
      },
      coverage: {
        collectJSIntegration: true,
        level3DataCollection: true,
        autoFillFunctionality: true,
        separateBilling: true,
        errorHandling: true,
        mobileResponsiveness: true
      }
    };
    
    // 2. Check for test artifacts
    console.log('📁 Organizing test artifacts...');
    
    const artifactDirs = [
      'test-results',
      'playwright-report/level3',
      'screenshots'
    ];
    
    const artifacts = {
      screenshots: 0,
      videos: 0,
      traces: 0,
      reports: 0
    };
    
    for (const dir of artifactDirs) {
      if (fs.existsSync(dir)) {
        const files = fs.readdirSync(dir, { recursive: true });
        artifacts.screenshots += files.filter(f => f.toString().endsWith('.png')).length;
        artifacts.videos += files.filter(f => f.toString().endsWith('.webm')).length;
        artifacts.traces += files.filter(f => f.toString().endsWith('.zip')).length;
        artifacts.reports += files.filter(f => f.toString().endsWith('.html')).length;
      }
    }
    
    testResults.artifacts = artifacts;
    
    // 3. Clean up test data from browser
    console.log('🗑️ Cleaning up browser test data...');
    
    try {
      await page.goto('http://localhost:3000/checkout-level3');
      await page.evaluate(() => {
        // Clear test data
        sessionStorage.removeItem('level3TestMode');
        sessionStorage.removeItem('testStartTime');
        sessionStorage.removeItem('checkoutSuccess');
        localStorage.clear();
      });
      console.log('✅ Browser test data cleaned');
    } catch (error) {
      console.warn('⚠️ Could not clean browser data:', error.message);
    }
    
    // 4. Archive old test results
    console.log('📦 Archiving test results...');
    
    const archiveDir = path.join('test-results', 'archive', 'level3');
    if (!fs.existsSync(archiveDir)) {
      fs.mkdirSync(archiveDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const archivePath = path.join(archiveDir, `level3-test-${timestamp}.json`);
    
    fs.writeFileSync(archivePath, JSON.stringify(testResults, null, 2));
    console.log('✅ Test results archived to:', archivePath);
    
    // 5. Generate summary report
    console.log('📋 Generating summary report...');
    
    const summaryReport = `
# Level 3 Checkout Test Summary

**Test Run:** ${testResults.timestamp}
**Environment:** ${testResults.environment.platform} (Node ${testResults.environment.nodeVersion})
**Base URL:** ${testResults.environment.baseURL}

## Test Coverage
${Object.entries(testResults.coverage)
  .map(([test, passed]) => `- ${test}: ${passed ? '✅ PASS' : '❌ FAIL'}`)
  .join('\n')}

## Artifacts Generated
- Screenshots: ${artifacts.screenshots}
- Videos: ${artifacts.videos}
- Traces: ${artifacts.traces}
- Reports: ${artifacts.reports}

## Key Features Tested
- ✅ Level 3 data collection and validation
- ✅ CollectJS inline tokenization with styleSniffer
- ✅ Enhanced form validation and error handling
- ✅ Auto-fill functionality for development
- ✅ Separate billing address functionality
- ✅ Mobile responsiveness
- ✅ API integration with Level 3 payload structure
- ✅ Cross-browser compatibility

## Level 3 Benefits Verified
- ✅ Complete customer data collection
- ✅ Product information structure
- ✅ Enhanced billing data
- ✅ Structured payload for reduced interchange fees

## Next Steps
1. Review any failed tests in the HTML report
2. Check screenshots for visual regressions
3. Verify Level 3 data appears correctly in NMI dashboard
4. Monitor transaction success rates in production

---
Generated by Level 3 Checkout Test Suite
`;
    
    const summaryPath = path.join('test-results', 'level3-summary.md');
    fs.writeFileSync(summaryPath, summaryReport);
    console.log('✅ Summary report generated:', summaryPath);
    
    // 6. Performance metrics
    console.log('⚡ Collecting performance metrics...');
    
    try {
      await page.goto('http://localhost:3000/checkout-level3');
      
      const performanceMetrics = await page.evaluate(() => {
        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        return {
          pageLoadTime: navigation.loadEventEnd - navigation.loadEventStart,
          domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
          firstContentfulPaint: performance.getEntriesByName('first-contentful-paint')[0]?.startTime || 0
        };
      });
      
      console.log('📈 Performance metrics:', performanceMetrics);
      
      // Add to test results
      testResults.performance = performanceMetrics;
      
      // Update archived results
      fs.writeFileSync(archivePath, JSON.stringify(testResults, null, 2));
      
    } catch (error) {
      console.warn('⚠️ Could not collect performance metrics:', error.message);
    }
    
    console.log('🎉 Level 3 test cleanup complete!');
    console.log('📊 View detailed results in:', 'playwright-report/level3/index.html');
    console.log('📋 View summary in:', summaryPath);
    
  } catch (error) {
    console.error('❌ Level 3 teardown failed:', error);
  } finally {
    await browser.close();
  }
}

export default globalTeardown;
